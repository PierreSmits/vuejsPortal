Index: framework/widget/src/main/java/org/apache/ofbiz/widget/model/ModelScreenWidget.java
===================================================================
--- framework/widget/src/main/java/org/apache/ofbiz/widget/model/ModelScreenWidget.java	(r√©vision 1861341)
+++ framework/widget/src/main/java/org/apache/ofbiz/widget/model/ModelScreenWidget.java	(copie de travail)
@@ -1870,6 +1870,10 @@
     public static final class PortalPage extends ModelScreenWidget {
         public static final String TAG_NAME = "include-portal-page";
         private final FlexibleStringExpander idExdr;
+        // Begin modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
+        private final FlexibleStringExpander portletId;
+        private final FlexibleStringExpander portletSeqId;
+        // End modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
         private final FlexibleStringExpander confModeExdr;
         private final Boolean usePrivate;
 
@@ -1878,6 +1882,15 @@
             this.idExdr = FlexibleStringExpander.getInstance(portalPageElement.getAttribute("id"));
             this.confModeExdr = FlexibleStringExpander.getInstance(portalPageElement.getAttribute("conf-mode"));
             this.usePrivate = !("false".equals(portalPageElement.getAttribute("use-private")));
+
+            // Begin modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
+            if (! portalPageElement.getAttribute("portletId").isEmpty()) {
+                this.portletId = FlexibleStringExpander.getInstance(portalPageElement.getAttribute("portletId"));
+            } else this.portletId = null;
+            if (! portalPageElement.getAttribute("portletSeqId").isEmpty()) {
+                this.portletSeqId = FlexibleStringExpander.getInstance(portalPageElement.getAttribute("portletSeqId"));
+            } else this.portletSeqId = null;
+            // End modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
         }
 
         private GenericValue getPortalPageValue(Map<String, Object> context) {
@@ -1915,6 +1928,7 @@
                 List<GenericValue> portletAttributes = null;
                 GenericValue portalPage = getPortalPageValue(context);
                 String actualPortalPageId = portalPage.getString("portalPageId");
+if (this.portletId == null) { // modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
                 portalPageColumns = EntityQuery.use(delegator)
                                                .from("PortalPageColumn")
                                                .where("portalPageId", actualPortalPageId)
@@ -2009,6 +2023,71 @@
                 }
                 // Renders the portalPage footer
                 screenStringRenderer.renderPortalPageEnd(writer, context, this);
+// Begin modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
+} else {
+    String portalPageId = portalPage.getString("portalPageId");
+    String portalPortletId = this.portletId.expandString(context);
+    String portletSeqId = this.portletSeqId.expandString(context);
+    GenericValue portalPagePortletValue = EntityQuery.use(delegator)
+            .from("PortalPagePortletView")
+            .where("portalPageId"   , portalPageId, 
+                   "portalPortletId", portalPortletId, 
+                   "portletSeqId",    portletSeqId)
+            .cache().queryOne();
+    ListIterator <GenericValue>attributesIterator = null;
+    boolean putAttributes = false;
+    if (portalPagePortletValue != null) {
+        putAttributes = true;
+        // Get portlet's attributes
+        portletAttributes = EntityQuery.use(delegator)
+                .from("PortletAttribute")
+                .where("portalPageId", portalPagePortletValue.get("portalPageId"), 
+                        "portalPortletId", portalPagePortletValue.get("portalPortletId"), 
+                        "portletSeqId", portalPagePortletValue.get("portletSeqId"))
+                .queryList();
+        
+        attributesIterator = portletAttributes.listIterator();
+        while (attributesIterator.hasNext()) {
+            GenericValue attribute = attributesIterator.next();
+            context.put(attribute.getString("attrName"), attribute.getString("attrValue"));
+        }
+    } else {
+        GenericValue portalPortletValue = EntityQuery.use(delegator)
+                .from("PortalPortlet")
+                .where("portalPortletId", portalPortletId) 
+                .cache().queryOne();
+        if (portalPortletValue == null) {
+            String errMsg = "Error rendering PortalPortlet with portletId [" + portalPortletId + "]: inexisting portlet ";
+            throw new RuntimeException(errMsg);
+        }
+        portalPagePortletValue = delegator.makeValue("PortalPagePortletView", 
+                "portalPageId"   , portalPageId, 
+                "portalPortletId", portalPortletId, 
+                "portletSeqId",    portletSeqId,
+                "portletName",         portalPortletValue.get("portletName"),
+                "screenName",          portalPortletValue.get("screenName"),
+                "screenLocation",      portalPortletValue.get("screenLocation"),
+                "editFormName",        portalPortletValue.get("editFormName"),
+                "editFormLocation",    portalPortletValue.get("editFormLocation"),
+                "securityServiceName", portalPortletValue.get("securityServiceName"),
+                "securityMainAction",  portalPortletValue.get("securityMainAction")
+                );
+    }
+
+    // Renders the portalPagePortlet
+    screenStringRenderer.renderPortalPagePortletBegin(writer, context, this, portalPagePortletValue);
+    screenStringRenderer.renderPortalPagePortletBody(writer, context, this, portalPagePortletValue);
+    screenStringRenderer.renderPortalPagePortletEnd(writer, context, this, portalPagePortletValue);
+
+    if (putAttributes) {
+        // Remove the portlet's attributes so that these are not available for other portlets
+        while (attributesIterator.hasPrevious()) {
+            GenericValue attribute = attributesIterator.previous();
+            context.remove(attribute.getString("attrName"));
+        }
+    }
+}
+//End modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
             } catch (IOException | GenericEntityException e) {
                 String errMsg = "Error rendering PortalPage with portalPageId [" + getId(context) + "]: " + e.toString();
                 Debug.logError(e, errMsg, module);
