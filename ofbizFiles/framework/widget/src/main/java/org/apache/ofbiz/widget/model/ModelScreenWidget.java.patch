Index: framework/widget/src/main/java/org/apache/ofbiz/widget/model/ModelScreenWidget.java
===================================================================
--- framework/widget/src/main/java/org/apache/ofbiz/widget/model/ModelScreenWidget.java	(r√©vision 1863538)
+++ framework/widget/src/main/java/org/apache/ofbiz/widget/model/ModelScreenWidget.java	(copie de travail)
@@ -1035,7 +1035,64 @@
             return styleExdr;
         }
     }
+    public static final class VueJs extends ModelScreenWidget {
+        public static final String TAG_NAME = "vuejs";
+        private final FlexibleStringExpander componentNameExdr;
+        private final List<Parameter> parameterList;
 
+        public VueJs(ModelScreen modelScreen, Element vueJsElement) {
+            super(modelScreen, vueJsElement);
+
+            this.componentNameExdr = FlexibleStringExpander.getInstance(vueJsElement.getAttribute("component-name"));
+            List<? extends Element> parameterElementList = UtilXml.childElementList(vueJsElement, "parameter");
+            if (parameterElementList.isEmpty() ) {
+                this.parameterList = Collections.emptyList();
+            } else {
+                List<Parameter> parameterList = new ArrayList<>(parameterElementList.size());
+                for (Element parameterElement : parameterElementList) {
+                    parameterList.add(new Parameter(parameterElement));
+                }
+                this.parameterList = Collections.unmodifiableList(parameterList);
+            }
+
+        }
+
+        @Override
+        public void renderWidgetString(Appendable writer, Map<String, Object> context, ScreenStringRenderer screenStringRenderer) {
+            try {
+                screenStringRenderer.renderVueJs(writer, context, this);
+            } catch (IOException e) {
+                String errMsg = "Error rendering vue-js in screen named [" + getModelScreen().getName() + "]: " + e.toString();
+                Debug.logError(e, errMsg, module);
+                throw new RuntimeException(errMsg);
+            }
+        }
+
+        public Map<String, String> getParameterMap(Map<String, Object> context) {
+            Map<String, String> fullParameterMap = new HashMap<>();
+            for (Parameter parameter : this.parameterList) {
+                fullParameterMap.put(parameter.getName(), parameter.getValue(context));
+            }
+            return fullParameterMap;
+        }
+
+        public String getComponentName(Map<String, Object> context) {
+            return this.componentNameExdr.expandString(context);
+        }
+
+        public FlexibleStringExpander getComponentNameExdr() {
+            return componentNameExdr;
+        }
+        public List<Parameter> getParameterList() {
+            return parameterList;
+        }
+
+        @Override
+        public void accept(ModelWidgetVisitor visitor) throws Exception {
+            visitor.visit(this);
+        }
+    }
+
     public static final class Form extends ModelScreenWidget {
         public static final String TAG_NAME = "include-form";
         private final FlexibleStringExpander nameExdr;
@@ -1289,7 +1346,7 @@
         }
     }
 
-    public static final class PlatformSpecific extends ModelScreenWidget {
+    public static final class PlatformSpecific extends ModelScreenWidget { 
         public static final String TAG_NAME = "platform-specific";
         private final Map<String, ModelScreenWidget> subWidgets;
 
@@ -1871,6 +1928,10 @@
     public static final class PortalPage extends ModelScreenWidget {
         public static final String TAG_NAME = "include-portal-page";
         private final FlexibleStringExpander idExdr;
+        // Begin modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
+        private final FlexibleStringExpander portletId;
+        private final FlexibleStringExpander portletSeqId;
+        // End modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
         private final FlexibleStringExpander confModeExdr;
         private final Boolean usePrivate;
 
@@ -1879,6 +1940,15 @@
             this.idExdr = FlexibleStringExpander.getInstance(portalPageElement.getAttribute("id"));
             this.confModeExdr = FlexibleStringExpander.getInstance(portalPageElement.getAttribute("conf-mode"));
             this.usePrivate = !("false".equals(portalPageElement.getAttribute("use-private")));
+
+            // Begin modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
+            if (! portalPageElement.getAttribute("portletId").isEmpty()) {
+                this.portletId = FlexibleStringExpander.getInstance(portalPageElement.getAttribute("portletId"));
+            } else this.portletId = null;
+            if (! portalPageElement.getAttribute("portletSeqId").isEmpty()) {
+                this.portletSeqId = FlexibleStringExpander.getInstance(portalPageElement.getAttribute("portletSeqId"));
+            } else this.portletSeqId = null;
+            // End modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
         }
 
         private GenericValue getPortalPageValue(Map<String, Object> context) {
@@ -1916,6 +1986,7 @@
                 List<GenericValue> portletAttributes = null;
                 GenericValue portalPage = getPortalPageValue(context);
                 String actualPortalPageId = portalPage.getString("portalPageId");
+if (this.portletId == null) { // modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
                 portalPageColumns = EntityQuery.use(delegator)
                                                .from("PortalPageColumn")
                                                .where("portalPageId", actualPortalPageId)
@@ -2010,6 +2081,71 @@
                 }
                 // Renders the portalPage footer
                 screenStringRenderer.renderPortalPageEnd(writer, context, this);
+// Begin modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
+} else {
+    String portalPageId = portalPage.getString("portalPageId");
+    String portalPortletId = this.portletId.expandString(context);
+    String portletSeqId = this.portletSeqId.expandString(context);
+    GenericValue portalPagePortletValue = EntityQuery.use(delegator)
+            .from("PortalPagePortletView")
+            .where("portalPageId"   , portalPageId, 
+                   "portalPortletId", portalPortletId, 
+                   "portletSeqId",    portletSeqId)
+            .cache().queryOne();
+    ListIterator <GenericValue>attributesIterator = null;
+    boolean putAttributes = false;
+    if (portalPagePortletValue != null) {
+        putAttributes = true;
+        // Get portlet's attributes
+        portletAttributes = EntityQuery.use(delegator)
+                .from("PortletAttribute")
+                .where("portalPageId", portalPagePortletValue.get("portalPageId"), 
+                        "portalPortletId", portalPagePortletValue.get("portalPortletId"), 
+                        "portletSeqId", portalPagePortletValue.get("portletSeqId"))
+                .queryList();
+        
+        attributesIterator = portletAttributes.listIterator();
+        while (attributesIterator.hasNext()) {
+            GenericValue attribute = attributesIterator.next();
+            context.put(attribute.getString("attrName"), attribute.getString("attrValue"));
+        }
+    } else {
+        GenericValue portalPortletValue = EntityQuery.use(delegator)
+                .from("PortalPortlet")
+                .where("portalPortletId", portalPortletId) 
+                .cache().queryOne();
+        if (portalPortletValue == null) {
+            String errMsg = "Error rendering PortalPortlet with portletId [" + portalPortletId + "]: inexisting portlet ";
+            throw new RuntimeException(errMsg);
+        }
+        portalPagePortletValue = delegator.makeValue("PortalPagePortletView", 
+                "portalPageId"   , portalPageId, 
+                "portalPortletId", portalPortletId, 
+                "portletSeqId",    portletSeqId,
+                "portletName",         portalPortletValue.get("portletName"),
+                "screenName",          portalPortletValue.get("screenName"),
+                "screenLocation",      portalPortletValue.get("screenLocation"),
+                "editFormName",        portalPortletValue.get("editFormName"),
+                "editFormLocation",    portalPortletValue.get("editFormLocation"),
+                "securityServiceName", portalPortletValue.get("securityServiceName"),
+                "securityMainAction",  portalPortletValue.get("securityMainAction")
+                );
+    }
+
+    // Renders the portalPagePortlet
+    screenStringRenderer.renderPortalPagePortletBegin(writer, context, this, portalPagePortletValue);
+    screenStringRenderer.renderPortalPagePortletBody(writer, context, this, portalPagePortletValue);
+    screenStringRenderer.renderPortalPagePortletEnd(writer, context, this, portalPagePortletValue);
+
+    if (putAttributes) {
+        // Remove the portlet's attributes so that these are not available for other portlets
+        while (attributesIterator.hasPrevious()) {
+            GenericValue attribute = attributesIterator.previous();
+            context.remove(attribute.getString("attrName"));
+        }
+    }
+}
+//End modification FrontJs POC, add portletId and portletSeqId to be able to do a include-portal which will do a include-portlet
             } catch (IOException | GenericEntityException e) {
                 String errMsg = "Error rendering PortalPage with portalPageId [" + getId(context) + "]: " + e.toString();
                 Debug.logError(e, errMsg, module);
